import os
import io
from io import BytesIO
import pandas as pd
import streamlit as st
from analyzer import normalize_fields, llm_analysis, heuristic_analysis, UNIFIED_COLUMNS, USE_OPENAI

st.set_page_config(page_title="Cyber Incident AI Report", page_icon="üõ°Ô∏è", layout="wide")

st.title("üõ°Ô∏è Cyber Incident AI Report (Web App)")
st.caption("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Incident (CSV/XLSX) ‚Üí ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏î‡πâ‡∏ß‡∏¢ AI ‚Üí ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel ‡∏ó‡∏µ‡πà‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•")

with st.expander("‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ", expanded=False):
    st.markdown("""
1) ‡∏Å‡∏î **Browse files** ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Incident (CSV ‡∏´‡∏£‡∏∑‡∏≠ XLSX)\n
2) ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÉ‡∏ä‡πâ **AI (OpenAI)** ‡∏´‡∏£‡∏∑‡∏≠ **Heuristic (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ AI)**\n
3) ‡∏Å‡∏î **Run Analysis** ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏•‡∏™‡∏£‡∏∏‡∏õ\n
4) ‡∏Å‡∏î **Download XLSX** ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
""")

left, right = st.columns([2,1])

with left:
    file = st.file_uploader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå CSV/XLSX", type=["csv","xlsx"])

with right:
    use_ai = st.checkbox("‡πÉ‡∏ä‡πâ AI (OpenAI)", value=bool(os.environ.get("OPENAI_API_KEY")))
    if use_ai and not os.environ.get("OPENAI_API_KEY"):
        st.warning("‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ OPENAI_API_KEY ‡πÉ‡∏ô environment ‚Üí ‡∏à‡∏∞‡πÉ‡∏ä‡πâ Heuristic ‡πÅ‡∏ó‡∏ô")

run = st.button("‚ñ∂Ô∏è Run Analysis")

if run:
    if not file:
        st.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏Å‡πà‡∏≠‡∏ô")
        st.stop()

    # read input
    if file.name.lower().endswith(".csv"):
        df = pd.read_csv(file)
    else:
        df = pd.read_excel(file)

    # normalize fields
    df = normalize_fields(df)

    st.write("‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå:", df.head(5))

    # analyze rows
    results = []
    for _, row in df.iterrows():
        if use_ai and USE_OPENAI:
            analysis, short_fix, long_fix = llm_analysis(row)
        else:
            analysis, short_fix, long_fix = heuristic_analysis(row)
        results.append({
            "Incident ID": row.get("issue_key") or row.get("issue_id"),
            "Use Case": row.get("use_case"),
            "Device": row.get("device_name"),
            "Severity": row.get("sev") or row.get("priority"),
            "Analysis (‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå)": analysis,
            "Short Term Fix": short_fix,
            "Long Term Fix": long_fix,
            "Source IP": row.get("src_ip"),
            "Destination IP": row.get("dest_ip"),
            "Action": row.get("action"),
            "Signature": row.get("signature_name"),
            "File Path": row.get("file_path"),
            "Hash": row.get("hash"),
        })

    out_df = pd.DataFrame(results)

    st.success("‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß ‚úÖ")

    # show preview
    st.dataframe(out_df.head(20), use_container_width=True)

    # to excel bytes
    output = BytesIO()
    with pd.ExcelWriter(output, engine="openpyxl") as writer:
        out_df.to_excel(writer, index=False, sheet_name="AI Report")
    data = output.getvalue()

    st.download_button(
        label="‚¨áÔ∏è Download XLSX",
        data=data,
        file_name="cyber_incident_ai_report.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )